//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.7
//
// <auto-generated>
//
// Generated from file `lamp.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace device
{
    namespace lamp
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public enum LampStatus
        {
            ON = 100,
            OFF = 0
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public sealed class LampStatusHelper
        {
            public static void write(global::Ice.OutputStream ostr, LampStatus v)
            {
                ostr.writeEnum((int) v, 100);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static LampStatus read(global::Ice.InputStream istr)
            {
                LampStatus v;
                v = (LampStatus) istr.readEnum(100);
                return v;
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public abstract class MinPowerLevel
        {
            public const int value = 0;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public abstract class MaxPowerLevel
        {
            public const int value = 100;
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
        [global::System.Serializable]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class PowerLevelOutOfRange : global::Ice.UserException
        {
            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public PowerLevelOutOfRange()
            {
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public PowerLevelOutOfRange(global::System.Exception ex) : base(ex)
            {
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public PowerLevelOutOfRange(global::System.Runtime.Serialization.SerializationInfo info,
                global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #endregion

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override string ice_id()
            {
                return "::device::lamp::PowerLevelOutOfRange";
            }

            #region Object members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                global::IceInternal.HashUtil.hashAdd(ref h_, "::device::lamp::PowerLevelOutOfRange");
                return h_;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override bool Equals(object other)
            {
                if (other == null)
                {
                    return false;
                }

                if (object.ReferenceEquals(this, other))
                {
                    return true;
                }

                PowerLevelOutOfRange o = other as PowerLevelOutOfRange;
                if (o == null)
                {
                    return false;
                }

                return true;
            }

            #endregion

            #region Comparison members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator ==(PowerLevelOutOfRange lhs, PowerLevelOutOfRange rhs)
            {
                return Equals(lhs, rhs);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator !=(PowerLevelOutOfRange lhs, PowerLevelOutOfRange rhs)
            {
                return !Equals(lhs, rhs);
            }

            #endregion

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice("::device::lamp::PowerLevelOutOfRange", -1, true);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.endSlice();
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
        [global::System.Serializable]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class RgbColorIsIncorect : global::Ice.UserException
        {
            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public RgbColorIsIncorect()
            {
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public RgbColorIsIncorect(global::System.Exception ex) : base(ex)
            {
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public RgbColorIsIncorect(global::System.Runtime.Serialization.SerializationInfo info,
                global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #endregion

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override string ice_id()
            {
                return "::device::lamp::RgbColorIsIncorect";
            }

            #region Object members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                global::IceInternal.HashUtil.hashAdd(ref h_, "::device::lamp::RgbColorIsIncorect");
                return h_;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override bool Equals(object other)
            {
                if (other == null)
                {
                    return false;
                }

                if (object.ReferenceEquals(this, other))
                {
                    return true;
                }

                RgbColorIsIncorect o = other as RgbColorIsIncorect;
                if (o == null)
                {
                    return false;
                }

                return true;
            }

            #endregion

            #region Comparison members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator ==(RgbColorIsIncorect lhs, RgbColorIsIncorect rhs)
            {
                return Equals(lhs, rhs);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator !=(RgbColorIsIncorect lhs, RgbColorIsIncorect rhs)
            {
                return !Equals(lhs, rhs);
            }

            #endregion

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice("::device::lamp::RgbColorIsIncorect", -1, true);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.endSlice();
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface ClassicLamp : global::Ice.Object, ClassicLampOperations_
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public abstract class MinColorNumber
        {
            public const int value = 0;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public abstract class MaxColorNumber
        {
            public const int value = 255;
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [global::System.Serializable]
        public partial struct RgbColor
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public int red;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public int green;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public int blue;

            #endregion

            partial void ice_initialize();

            #region Constructor

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public RgbColor(int red, int green, int blue)
            {
                this.red = red;
                this.green = green;
                this.blue = blue;
                ice_initialize();
            }

            #endregion

            #region Object members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                global::IceInternal.HashUtil.hashAdd(ref h_, "::device::lamp::RgbColor");
                global::IceInternal.HashUtil.hashAdd(ref h_, red);
                global::IceInternal.HashUtil.hashAdd(ref h_, green);
                global::IceInternal.HashUtil.hashAdd(ref h_, blue);
                return h_;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override bool Equals(object other)
            {
                if (!(other is RgbColor))
                {
                    return false;
                }

                RgbColor o = (RgbColor) other;
                if (!this.red.Equals(o.red))
                {
                    return false;
                }

                if (!this.green.Equals(o.green))
                {
                    return false;
                }

                if (!this.blue.Equals(o.blue))
                {
                    return false;
                }

                return true;
            }

            #endregion

            #region Comparison members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator ==(RgbColor lhs, RgbColor rhs)
            {
                return Equals(lhs, rhs);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator !=(RgbColor lhs, RgbColor rhs)
            {
                return !Equals(lhs, rhs);
            }

            #endregion

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public void ice_writeMembers(global::Ice.OutputStream ostr)
            {
                ostr.writeInt(this.red);
                ostr.writeInt(this.green);
                ostr.writeInt(this.blue);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public void ice_readMembers(global::Ice.InputStream istr)
            {
                this.red = istr.readInt();
                this.green = istr.readInt();
                this.blue = istr.readInt();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static void ice_write(global::Ice.OutputStream ostr, RgbColor v)
            {
                v.ice_writeMembers(ostr);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static RgbColor ice_read(global::Ice.InputStream istr)
            {
                var v = new RgbColor();
                v.ice_readMembers(istr);
                return v;
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface RgbLamp : global::Ice.Object, RgbLampOperations_, ClassicLamp
        {
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public enum ColorTemperature
        {
            WARM = 1000,
            NORMAL = 5500,
            COOL = 10000
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public sealed class ColorTemperatureHelper
        {
            public static void write(global::Ice.OutputStream ostr, ColorTemperature v)
            {
                ostr.writeEnum((int) v, 10000);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static ColorTemperature read(global::Ice.InputStream istr)
            {
                ColorTemperature v;
                v = (ColorTemperature) istr.readEnum(10000);
                return v;
            }
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface LightTemperatureLamp : global::Ice.Object, LightTemperatureLampOperations_, ClassicLamp
        {
        }
    }
}

namespace device
{
    namespace lamp
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_ClassicLamp_setLampStatus();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_ClassicLamp_getLampStatus(LampStatus ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_ClassicLamp_setLampPower();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_ClassicLamp_getLampPower(int ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_RgbLamp_setRgbColor();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_RgbLamp_getRgbColor(RgbColor ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_LightTemperatureLamp_setColorTemperature();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_LightTemperatureLamp_getColorTemperature(ColorTemperature ret);
    }
}

namespace device
{
    namespace lamp
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface ClassicLampPrx : global::Ice.ObjectPrx
        {
            void setLampStatus(LampStatus lampStatus,
                global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task setLampStatusAsync(LampStatus lampStatus,
                global::Ice.OptionalContext context = new global::Ice.OptionalContext(),
                global::System.IProgress<bool> progress = null,
                global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_ClassicLamp_setLampStatus> begin_setLampStatus(LampStatus lampStatus,
                global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_setLampStatus(LampStatus lampStatus, global::Ice.AsyncCallback callback,
                object cookie);

            global::Ice.AsyncResult begin_setLampStatus(LampStatus lampStatus, global::Ice.OptionalContext context,
                global::Ice.AsyncCallback callback, object cookie);

            void end_setLampStatus(global::Ice.AsyncResult asyncResult);

            LampStatus getLampStatus(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<LampStatus> getLampStatusAsync(
                global::Ice.OptionalContext context = new global::Ice.OptionalContext(),
                global::System.IProgress<bool> progress = null,
                global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_ClassicLamp_getLampStatus> begin_getLampStatus(
                global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_getLampStatus(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_getLampStatus(global::Ice.OptionalContext context,
                global::Ice.AsyncCallback callback, object cookie);

            LampStatus end_getLampStatus(global::Ice.AsyncResult asyncResult);

            void setLampPower(int powerLevel, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task setLampPowerAsync(int powerLevel,
                global::Ice.OptionalContext context = new global::Ice.OptionalContext(),
                global::System.IProgress<bool> progress = null,
                global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_ClassicLamp_setLampPower> begin_setLampPower(int powerLevel,
                global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_setLampPower(int powerLevel, global::Ice.AsyncCallback callback,
                object cookie);

            global::Ice.AsyncResult begin_setLampPower(int powerLevel, global::Ice.OptionalContext context,
                global::Ice.AsyncCallback callback, object cookie);

            void end_setLampPower(global::Ice.AsyncResult asyncResult);

            int getLampPower(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<int> getLampPowerAsync(
                global::Ice.OptionalContext context = new global::Ice.OptionalContext(),
                global::System.IProgress<bool> progress = null,
                global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_ClassicLamp_getLampPower> begin_getLampPower(
                global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_getLampPower(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_getLampPower(global::Ice.OptionalContext context,
                global::Ice.AsyncCallback callback, object cookie);

            int end_getLampPower(global::Ice.AsyncResult asyncResult);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface RgbLampPrx : ClassicLampPrx
        {
            void setRgbColor(RgbColor rgbColor,
                global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task setRgbColorAsync(RgbColor rgbColor,
                global::Ice.OptionalContext context = new global::Ice.OptionalContext(),
                global::System.IProgress<bool> progress = null,
                global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_RgbLamp_setRgbColor> begin_setRgbColor(RgbColor rgbColor,
                global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_setRgbColor(RgbColor rgbColor, global::Ice.AsyncCallback callback,
                object cookie);

            global::Ice.AsyncResult begin_setRgbColor(RgbColor rgbColor, global::Ice.OptionalContext context,
                global::Ice.AsyncCallback callback, object cookie);

            void end_setRgbColor(global::Ice.AsyncResult asyncResult);

            RgbColor getRgbColor(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<RgbColor> getRgbColorAsync(
                global::Ice.OptionalContext context = new global::Ice.OptionalContext(),
                global::System.IProgress<bool> progress = null,
                global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_RgbLamp_getRgbColor> begin_getRgbColor(
                global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_getRgbColor(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_getRgbColor(global::Ice.OptionalContext context,
                global::Ice.AsyncCallback callback, object cookie);

            RgbColor end_getRgbColor(global::Ice.AsyncResult asyncResult);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface LightTemperatureLampPrx : ClassicLampPrx
        {
            void setColorTemperature(ColorTemperature colorTemperature,
                global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task setColorTemperatureAsync(ColorTemperature colorTemperature,
                global::Ice.OptionalContext context = new global::Ice.OptionalContext(),
                global::System.IProgress<bool> progress = null,
                global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_LightTemperatureLamp_setColorTemperature> begin_setColorTemperature(
                ColorTemperature colorTemperature,
                global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_setColorTemperature(ColorTemperature colorTemperature,
                global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_setColorTemperature(ColorTemperature colorTemperature,
                global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_setColorTemperature(global::Ice.AsyncResult asyncResult);

            ColorTemperature getColorTemperature(
                global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<ColorTemperature> getColorTemperatureAsync(
                global::Ice.OptionalContext context = new global::Ice.OptionalContext(),
                global::System.IProgress<bool> progress = null,
                global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_LightTemperatureLamp_getColorTemperature> begin_getColorTemperature(
                global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_getColorTemperature(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_getColorTemperature(global::Ice.OptionalContext context,
                global::Ice.AsyncCallback callback, object cookie);

            ColorTemperature end_getColorTemperature(global::Ice.AsyncResult asyncResult);
        }
    }
}

namespace device
{
    namespace lamp
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface ClassicLampOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            void setLampStatus(LampStatus lampStatus, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            LampStatus getLampStatus(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            void setLampPower(int powerLevel, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            int getLampPower(global::Ice.Current current = null);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface RgbLampOperations_ : ClassicLampOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            void setRgbColor(RgbColor rgbColor, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            RgbColor getRgbColor(global::Ice.Current current = null);
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface LightTemperatureLampOperations_ : ClassicLampOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            void setColorTemperature(ColorTemperature colorTemperature, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            ColorTemperature getColorTemperature(global::Ice.Current current = null);
        }
    }
}

namespace device
{
    namespace lamp
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        [global::System.Serializable]
        public sealed class ClassicLampPrxHelper : global::Ice.ObjectPrxHelperBase, ClassicLampPrx
        {
            public ClassicLampPrxHelper()
            {
            }

            public ClassicLampPrxHelper(global::System.Runtime.Serialization.SerializationInfo info,
                global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public void setLampStatus(LampStatus lampStatus,
                global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_setLampStatusAsync(lampStatus, context, null, global::System.Threading.CancellationToken.None,
                        true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public LampStatus getLampStatus(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getLampStatusAsync(context, null, global::System.Threading.CancellationToken.None,
                        true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void setLampPower(int powerLevel,
                global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_setLampPowerAsync(powerLevel, context, null, global::System.Threading.CancellationToken.None,
                        true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public int getLampPower(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getLampPowerAsync(context, null, global::System.Threading.CancellationToken.None, true)
                        .Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task setLampStatusAsync(LampStatus lampStatus,
                global::Ice.OptionalContext context = new global::Ice.OptionalContext(),
                global::System.IProgress<bool> progress = null,
                global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_setLampStatusAsync(lampStatus, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_setLampStatusAsync(LampStatus iceP_lampStatus,
                global::Ice.OptionalContext context, global::System.IProgress<bool> progress,
                global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_setLampStatus(iceP_lampStatus, context, synchronous, completed);
                return completed.Task;
            }

            private const string _setLampStatus_name = "setLampStatus";

            private void _iceI_setLampStatus(LampStatus iceP_lampStatus,
                global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous,
                global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _setLampStatus_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) => { ostr.writeEnum((int) iceP_lampStatus, 100); });
            }

            public global::System.Threading.Tasks.Task<LampStatus> getLampStatusAsync(
                global::Ice.OptionalContext context = new global::Ice.OptionalContext(),
                global::System.IProgress<bool> progress = null,
                global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getLampStatusAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<LampStatus> _iceI_getLampStatusAsync(
                global::Ice.OptionalContext context, global::System.IProgress<bool> progress,
                global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getLampStatus_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<LampStatus>(progress, cancel);
                _iceI_getLampStatus(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getLampStatus_name = "getLampStatus";

            private void _iceI_getLampStatus(global::System.Collections.Generic.Dictionary<string, string> context,
                bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<LampStatus>(completed);
                outAsync.invoke(
                    _getLampStatus_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        LampStatus ret;
                        ret = (LampStatus) istr.readEnum(100);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task setLampPowerAsync(int powerLevel,
                global::Ice.OptionalContext context = new global::Ice.OptionalContext(),
                global::System.IProgress<bool> progress = null,
                global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_setLampPowerAsync(powerLevel, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_setLampPowerAsync(int iceP_powerLevel,
                global::Ice.OptionalContext context, global::System.IProgress<bool> progress,
                global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_setLampPower_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_setLampPower(iceP_powerLevel, context, synchronous, completed);
                return completed.Task;
            }

            private const string _setLampPower_name = "setLampPower";

            private void _iceI_setLampPower(int iceP_powerLevel,
                global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous,
                global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _setLampPower_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) => { ostr.writeInt(iceP_powerLevel); },
                    userException: (global::Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch (PowerLevelOutOfRange)
                        {
                            throw;
                        }
                        catch (global::Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task<int> getLampPowerAsync(
                global::Ice.OptionalContext context = new global::Ice.OptionalContext(),
                global::System.IProgress<bool> progress = null,
                global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getLampPowerAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<int> _iceI_getLampPowerAsync(
                global::Ice.OptionalContext context, global::System.IProgress<bool> progress,
                global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getLampPower_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
                _iceI_getLampPower(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getLampPower_name = "getLampPower";

            private void _iceI_getLampPower(global::System.Collections.Generic.Dictionary<string, string> context,
                bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<int>(completed);
                outAsync.invoke(
                    _getLampPower_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        int ret;
                        ret = istr.readInt();
                        return ret;
                    });
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_ClassicLamp_setLampStatus> begin_setLampStatus(
                LampStatus lampStatus, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_setLampStatus(lampStatus, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_setLampStatus(LampStatus lampStatus,
                global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_setLampStatus(lampStatus, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_setLampStatus(LampStatus lampStatus,
                global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_setLampStatus(lampStatus, context, callback, cookie, false);
            }

            public void end_setLampStatus(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _setLampStatus_name);
                ((global::IceInternal.OutgoingAsyncT<object>) resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_ClassicLamp_setLampStatus> begin_setLampStatus(
                LampStatus iceP_lampStatus, global::System.Collections.Generic.Dictionary<string, string> context,
                global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed =
                    new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ClassicLamp_setLampStatus,
                        object>(
                        (Callback_ClassicLamp_setLampStatus cb, object ret) =>
                        {
                            if (cb != null)
                            {
                                cb.Invoke();
                            }
                        },
                        this, _setLampStatus_name, cookie, completedCallback);
                _iceI_setLampStatus(iceP_lampStatus, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_ClassicLamp_getLampStatus> begin_getLampStatus(
                global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getLampStatus(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getLampStatus(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getLampStatus(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getLampStatus(global::Ice.OptionalContext context,
                global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getLampStatus(context, callback, cookie, false);
            }

            public LampStatus end_getLampStatus(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getLampStatus_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<LampStatus>) resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_ClassicLamp_getLampStatus> begin_getLampStatus(
                global::System.Collections.Generic.Dictionary<string, string> context,
                global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getLampStatus_name);
                var completed =
                    new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ClassicLamp_getLampStatus,
                        LampStatus>(
                        (Callback_ClassicLamp_getLampStatus cb, LampStatus ret) =>
                        {
                            if (cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _getLampStatus_name, cookie, completedCallback);
                _iceI_getLampStatus(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_ClassicLamp_setLampPower> begin_setLampPower(int powerLevel,
                global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_setLampPower(powerLevel, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_setLampPower(int powerLevel, global::Ice.AsyncCallback callback,
                object cookie)
            {
                return begin_setLampPower(powerLevel, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_setLampPower(int powerLevel, global::Ice.OptionalContext context,
                global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_setLampPower(powerLevel, context, callback, cookie, false);
            }

            public void end_setLampPower(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _setLampPower_name);
                ((global::IceInternal.OutgoingAsyncT<object>) resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_ClassicLamp_setLampPower> begin_setLampPower(int iceP_powerLevel,
                global::System.Collections.Generic.Dictionary<string, string> context,
                global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_setLampPower_name);
                var completed =
                    new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ClassicLamp_setLampPower,
                        object>(
                        (Callback_ClassicLamp_setLampPower cb, object ret) =>
                        {
                            if (cb != null)
                            {
                                cb.Invoke();
                            }
                        },
                        this, _setLampPower_name, cookie, completedCallback);
                _iceI_setLampPower(iceP_powerLevel, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_ClassicLamp_getLampPower> begin_getLampPower(
                global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getLampPower(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getLampPower(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getLampPower(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getLampPower(global::Ice.OptionalContext context,
                global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getLampPower(context, callback, cookie, false);
            }

            public int end_getLampPower(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getLampPower_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<int>) resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_ClassicLamp_getLampPower> begin_getLampPower(
                global::System.Collections.Generic.Dictionary<string, string> context,
                global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getLampPower_name);
                var completed =
                    new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ClassicLamp_getLampPower,
                        int>(
                        (Callback_ClassicLamp_getLampPower cb, int ret) =>
                        {
                            if (cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _getLampPower_name, cookie, completedCallback);
                _iceI_getLampPower(context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static ClassicLampPrx checkedCast(global::Ice.ObjectPrx b)
            {
                if (b == null)
                {
                    return null;
                }

                ClassicLampPrx r = b as ClassicLampPrx;
                if ((r == null) && b.ice_isA(ice_staticId()))
                {
                    ClassicLampPrxHelper h = new ClassicLampPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }

                return r;
            }

            public static ClassicLampPrx checkedCast(global::Ice.ObjectPrx b,
                global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if (b == null)
                {
                    return null;
                }

                ClassicLampPrx r = b as ClassicLampPrx;
                if ((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    ClassicLampPrxHelper h = new ClassicLampPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }

                return r;
            }

            public static ClassicLampPrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if (b == null)
                {
                    return null;
                }

                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if (bb.ice_isA(ice_staticId()))
                    {
                        ClassicLampPrxHelper h = new ClassicLampPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch (global::Ice.FacetNotExistException)
                {
                }

                return null;
            }

            public static ClassicLampPrx checkedCast(global::Ice.ObjectPrx b, string f,
                global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if (b == null)
                {
                    return null;
                }

                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if (bb.ice_isA(ice_staticId(), ctx))
                    {
                        ClassicLampPrxHelper h = new ClassicLampPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch (global::Ice.FacetNotExistException)
                {
                }

                return null;
            }

            public static ClassicLampPrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if (b == null)
                {
                    return null;
                }

                ClassicLampPrx r = b as ClassicLampPrx;
                if (r == null)
                {
                    ClassicLampPrxHelper h = new ClassicLampPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }

                return r;
            }

            public static ClassicLampPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if (b == null)
                {
                    return null;
                }

                global::Ice.ObjectPrx bb = b.ice_facet(f);
                ClassicLampPrxHelper h = new ClassicLampPrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::device::lamp::ClassicLamp"
            };

            public static string ice_staticId()
            {
                return _ids[1];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, ClassicLampPrx v)
            {
                ostr.writeProxy(v);
            }

            public static ClassicLampPrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if (proxy != null)
                {
                    ClassicLampPrxHelper result = new ClassicLampPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }

                return null;
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        [global::System.Serializable]
        public sealed class RgbLampPrxHelper : global::Ice.ObjectPrxHelperBase, RgbLampPrx
        {
            public RgbLampPrxHelper()
            {
            }

            public RgbLampPrxHelper(global::System.Runtime.Serialization.SerializationInfo info,
                global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public void setLampStatus(LampStatus lampStatus,
                global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_setLampStatusAsync(lampStatus, context, null, global::System.Threading.CancellationToken.None,
                        true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public LampStatus getLampStatus(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getLampStatusAsync(context, null, global::System.Threading.CancellationToken.None,
                        true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void setLampPower(int powerLevel,
                global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_setLampPowerAsync(powerLevel, context, null, global::System.Threading.CancellationToken.None,
                        true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public int getLampPower(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getLampPowerAsync(context, null, global::System.Threading.CancellationToken.None, true)
                        .Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void setRgbColor(RgbColor rgbColor,
                global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_setRgbColorAsync(rgbColor, context, null, global::System.Threading.CancellationToken.None,
                        true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public RgbColor getRgbColor(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getRgbColorAsync(context, null, global::System.Threading.CancellationToken.None, true)
                        .Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task setLampStatusAsync(LampStatus lampStatus,
                global::Ice.OptionalContext context = new global::Ice.OptionalContext(),
                global::System.IProgress<bool> progress = null,
                global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_setLampStatusAsync(lampStatus, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_setLampStatusAsync(LampStatus iceP_lampStatus,
                global::Ice.OptionalContext context, global::System.IProgress<bool> progress,
                global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_setLampStatus(iceP_lampStatus, context, synchronous, completed);
                return completed.Task;
            }

            private const string _setLampStatus_name = "setLampStatus";

            private void _iceI_setLampStatus(LampStatus iceP_lampStatus,
                global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous,
                global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _setLampStatus_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) => { ostr.writeEnum((int) iceP_lampStatus, 100); });
            }

            public global::System.Threading.Tasks.Task<LampStatus> getLampStatusAsync(
                global::Ice.OptionalContext context = new global::Ice.OptionalContext(),
                global::System.IProgress<bool> progress = null,
                global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getLampStatusAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<LampStatus> _iceI_getLampStatusAsync(
                global::Ice.OptionalContext context, global::System.IProgress<bool> progress,
                global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getLampStatus_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<LampStatus>(progress, cancel);
                _iceI_getLampStatus(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getLampStatus_name = "getLampStatus";

            private void _iceI_getLampStatus(global::System.Collections.Generic.Dictionary<string, string> context,
                bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<LampStatus>(completed);
                outAsync.invoke(
                    _getLampStatus_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        LampStatus ret;
                        ret = (LampStatus) istr.readEnum(100);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task setLampPowerAsync(int powerLevel,
                global::Ice.OptionalContext context = new global::Ice.OptionalContext(),
                global::System.IProgress<bool> progress = null,
                global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_setLampPowerAsync(powerLevel, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_setLampPowerAsync(int iceP_powerLevel,
                global::Ice.OptionalContext context, global::System.IProgress<bool> progress,
                global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_setLampPower_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_setLampPower(iceP_powerLevel, context, synchronous, completed);
                return completed.Task;
            }

            private const string _setLampPower_name = "setLampPower";

            private void _iceI_setLampPower(int iceP_powerLevel,
                global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous,
                global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _setLampPower_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) => { ostr.writeInt(iceP_powerLevel); },
                    userException: (global::Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch (PowerLevelOutOfRange)
                        {
                            throw;
                        }
                        catch (global::Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task<int> getLampPowerAsync(
                global::Ice.OptionalContext context = new global::Ice.OptionalContext(),
                global::System.IProgress<bool> progress = null,
                global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getLampPowerAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<int> _iceI_getLampPowerAsync(
                global::Ice.OptionalContext context, global::System.IProgress<bool> progress,
                global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getLampPower_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
                _iceI_getLampPower(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getLampPower_name = "getLampPower";

            private void _iceI_getLampPower(global::System.Collections.Generic.Dictionary<string, string> context,
                bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<int>(completed);
                outAsync.invoke(
                    _getLampPower_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        int ret;
                        ret = istr.readInt();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task setRgbColorAsync(RgbColor rgbColor,
                global::Ice.OptionalContext context = new global::Ice.OptionalContext(),
                global::System.IProgress<bool> progress = null,
                global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_setRgbColorAsync(rgbColor, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_setRgbColorAsync(RgbColor iceP_rgbColor,
                global::Ice.OptionalContext context, global::System.IProgress<bool> progress,
                global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_setRgbColor_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_setRgbColor(iceP_rgbColor, context, synchronous, completed);
                return completed.Task;
            }

            private const string _setRgbColor_name = "setRgbColor";

            private void _iceI_setRgbColor(RgbColor iceP_rgbColor,
                global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous,
                global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _setRgbColor_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) => { iceP_rgbColor.ice_writeMembers(ostr); },
                    userException: (global::Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch (RgbColorIsIncorect)
                        {
                            throw;
                        }
                        catch (global::Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task<RgbColor> getRgbColorAsync(
                global::Ice.OptionalContext context = new global::Ice.OptionalContext(),
                global::System.IProgress<bool> progress = null,
                global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getRgbColorAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<RgbColor> _iceI_getRgbColorAsync(
                global::Ice.OptionalContext context, global::System.IProgress<bool> progress,
                global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getRgbColor_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<RgbColor>(progress, cancel);
                _iceI_getRgbColor(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getRgbColor_name = "getRgbColor";

            private void _iceI_getRgbColor(global::System.Collections.Generic.Dictionary<string, string> context,
                bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<RgbColor>(completed);
                outAsync.invoke(
                    _getRgbColor_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        RgbColor ret = new RgbColor();
                        ret.ice_readMembers(istr);
                        return ret;
                    });
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_ClassicLamp_setLampStatus> begin_setLampStatus(
                LampStatus lampStatus, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_setLampStatus(lampStatus, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_setLampStatus(LampStatus lampStatus,
                global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_setLampStatus(lampStatus, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_setLampStatus(LampStatus lampStatus,
                global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_setLampStatus(lampStatus, context, callback, cookie, false);
            }

            public void end_setLampStatus(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _setLampStatus_name);
                ((global::IceInternal.OutgoingAsyncT<object>) resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_ClassicLamp_setLampStatus> begin_setLampStatus(
                LampStatus iceP_lampStatus, global::System.Collections.Generic.Dictionary<string, string> context,
                global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed =
                    new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ClassicLamp_setLampStatus,
                        object>(
                        (Callback_ClassicLamp_setLampStatus cb, object ret) =>
                        {
                            if (cb != null)
                            {
                                cb.Invoke();
                            }
                        },
                        this, _setLampStatus_name, cookie, completedCallback);
                _iceI_setLampStatus(iceP_lampStatus, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_ClassicLamp_getLampStatus> begin_getLampStatus(
                global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getLampStatus(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getLampStatus(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getLampStatus(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getLampStatus(global::Ice.OptionalContext context,
                global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getLampStatus(context, callback, cookie, false);
            }

            public LampStatus end_getLampStatus(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getLampStatus_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<LampStatus>) resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_ClassicLamp_getLampStatus> begin_getLampStatus(
                global::System.Collections.Generic.Dictionary<string, string> context,
                global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getLampStatus_name);
                var completed =
                    new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ClassicLamp_getLampStatus,
                        LampStatus>(
                        (Callback_ClassicLamp_getLampStatus cb, LampStatus ret) =>
                        {
                            if (cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _getLampStatus_name, cookie, completedCallback);
                _iceI_getLampStatus(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_ClassicLamp_setLampPower> begin_setLampPower(int powerLevel,
                global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_setLampPower(powerLevel, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_setLampPower(int powerLevel, global::Ice.AsyncCallback callback,
                object cookie)
            {
                return begin_setLampPower(powerLevel, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_setLampPower(int powerLevel, global::Ice.OptionalContext context,
                global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_setLampPower(powerLevel, context, callback, cookie, false);
            }

            public void end_setLampPower(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _setLampPower_name);
                ((global::IceInternal.OutgoingAsyncT<object>) resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_ClassicLamp_setLampPower> begin_setLampPower(int iceP_powerLevel,
                global::System.Collections.Generic.Dictionary<string, string> context,
                global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_setLampPower_name);
                var completed =
                    new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ClassicLamp_setLampPower,
                        object>(
                        (Callback_ClassicLamp_setLampPower cb, object ret) =>
                        {
                            if (cb != null)
                            {
                                cb.Invoke();
                            }
                        },
                        this, _setLampPower_name, cookie, completedCallback);
                _iceI_setLampPower(iceP_powerLevel, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_ClassicLamp_getLampPower> begin_getLampPower(
                global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getLampPower(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getLampPower(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getLampPower(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getLampPower(global::Ice.OptionalContext context,
                global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getLampPower(context, callback, cookie, false);
            }

            public int end_getLampPower(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getLampPower_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<int>) resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_ClassicLamp_getLampPower> begin_getLampPower(
                global::System.Collections.Generic.Dictionary<string, string> context,
                global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getLampPower_name);
                var completed =
                    new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ClassicLamp_getLampPower,
                        int>(
                        (Callback_ClassicLamp_getLampPower cb, int ret) =>
                        {
                            if (cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _getLampPower_name, cookie, completedCallback);
                _iceI_getLampPower(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_RgbLamp_setRgbColor> begin_setRgbColor(RgbColor rgbColor,
                global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_setRgbColor(rgbColor, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_setRgbColor(RgbColor rgbColor, global::Ice.AsyncCallback callback,
                object cookie)
            {
                return begin_setRgbColor(rgbColor, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_setRgbColor(RgbColor rgbColor, global::Ice.OptionalContext context,
                global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_setRgbColor(rgbColor, context, callback, cookie, false);
            }

            public void end_setRgbColor(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _setRgbColor_name);
                ((global::IceInternal.OutgoingAsyncT<object>) resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_RgbLamp_setRgbColor> begin_setRgbColor(RgbColor iceP_rgbColor,
                global::System.Collections.Generic.Dictionary<string, string> context,
                global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_setRgbColor_name);
                var completed =
                    new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_RgbLamp_setRgbColor,
                        object>(
                        (Callback_RgbLamp_setRgbColor cb, object ret) =>
                        {
                            if (cb != null)
                            {
                                cb.Invoke();
                            }
                        },
                        this, _setRgbColor_name, cookie, completedCallback);
                _iceI_setRgbColor(iceP_rgbColor, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_RgbLamp_getRgbColor> begin_getRgbColor(
                global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getRgbColor(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getRgbColor(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getRgbColor(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getRgbColor(global::Ice.OptionalContext context,
                global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getRgbColor(context, callback, cookie, false);
            }

            public RgbColor end_getRgbColor(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getRgbColor_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<RgbColor>) resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_RgbLamp_getRgbColor> begin_getRgbColor(
                global::System.Collections.Generic.Dictionary<string, string> context,
                global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getRgbColor_name);
                var completed =
                    new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_RgbLamp_getRgbColor,
                        RgbColor>(
                        (Callback_RgbLamp_getRgbColor cb, RgbColor ret) =>
                        {
                            if (cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _getRgbColor_name, cookie, completedCallback);
                _iceI_getRgbColor(context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static RgbLampPrx checkedCast(global::Ice.ObjectPrx b)
            {
                if (b == null)
                {
                    return null;
                }

                RgbLampPrx r = b as RgbLampPrx;
                if ((r == null) && b.ice_isA(ice_staticId()))
                {
                    RgbLampPrxHelper h = new RgbLampPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }

                return r;
            }

            public static RgbLampPrx checkedCast(global::Ice.ObjectPrx b,
                global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if (b == null)
                {
                    return null;
                }

                RgbLampPrx r = b as RgbLampPrx;
                if ((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    RgbLampPrxHelper h = new RgbLampPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }

                return r;
            }

            public static RgbLampPrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if (b == null)
                {
                    return null;
                }

                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if (bb.ice_isA(ice_staticId()))
                    {
                        RgbLampPrxHelper h = new RgbLampPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch (global::Ice.FacetNotExistException)
                {
                }

                return null;
            }

            public static RgbLampPrx checkedCast(global::Ice.ObjectPrx b, string f,
                global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if (b == null)
                {
                    return null;
                }

                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if (bb.ice_isA(ice_staticId(), ctx))
                    {
                        RgbLampPrxHelper h = new RgbLampPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch (global::Ice.FacetNotExistException)
                {
                }

                return null;
            }

            public static RgbLampPrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if (b == null)
                {
                    return null;
                }

                RgbLampPrx r = b as RgbLampPrx;
                if (r == null)
                {
                    RgbLampPrxHelper h = new RgbLampPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }

                return r;
            }

            public static RgbLampPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if (b == null)
                {
                    return null;
                }

                global::Ice.ObjectPrx bb = b.ice_facet(f);
                RgbLampPrxHelper h = new RgbLampPrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::device::lamp::ClassicLamp",
                "::device::lamp::RgbLamp"
            };

            public static string ice_staticId()
            {
                return _ids[2];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, RgbLampPrx v)
            {
                ostr.writeProxy(v);
            }

            public static RgbLampPrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if (proxy != null)
                {
                    RgbLampPrxHelper result = new RgbLampPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }

                return null;
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        [global::System.Serializable]
        public sealed class LightTemperatureLampPrxHelper : global::Ice.ObjectPrxHelperBase, LightTemperatureLampPrx
        {
            public LightTemperatureLampPrxHelper()
            {
            }

            public LightTemperatureLampPrxHelper(global::System.Runtime.Serialization.SerializationInfo info,
                global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public void setLampStatus(LampStatus lampStatus,
                global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_setLampStatusAsync(lampStatus, context, null, global::System.Threading.CancellationToken.None,
                        true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public LampStatus getLampStatus(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getLampStatusAsync(context, null, global::System.Threading.CancellationToken.None,
                        true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void setLampPower(int powerLevel,
                global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_setLampPowerAsync(powerLevel, context, null, global::System.Threading.CancellationToken.None,
                        true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public int getLampPower(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getLampPowerAsync(context, null, global::System.Threading.CancellationToken.None, true)
                        .Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void setColorTemperature(ColorTemperature colorTemperature,
                global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_setColorTemperatureAsync(colorTemperature, context, null,
                        global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public ColorTemperature getColorTemperature(
                global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getColorTemperatureAsync(context, null,
                        global::System.Threading.CancellationToken.None, true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task setLampStatusAsync(LampStatus lampStatus,
                global::Ice.OptionalContext context = new global::Ice.OptionalContext(),
                global::System.IProgress<bool> progress = null,
                global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_setLampStatusAsync(lampStatus, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_setLampStatusAsync(LampStatus iceP_lampStatus,
                global::Ice.OptionalContext context, global::System.IProgress<bool> progress,
                global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_setLampStatus(iceP_lampStatus, context, synchronous, completed);
                return completed.Task;
            }

            private const string _setLampStatus_name = "setLampStatus";

            private void _iceI_setLampStatus(LampStatus iceP_lampStatus,
                global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous,
                global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _setLampStatus_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) => { ostr.writeEnum((int) iceP_lampStatus, 100); });
            }

            public global::System.Threading.Tasks.Task<LampStatus> getLampStatusAsync(
                global::Ice.OptionalContext context = new global::Ice.OptionalContext(),
                global::System.IProgress<bool> progress = null,
                global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getLampStatusAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<LampStatus> _iceI_getLampStatusAsync(
                global::Ice.OptionalContext context, global::System.IProgress<bool> progress,
                global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getLampStatus_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<LampStatus>(progress, cancel);
                _iceI_getLampStatus(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getLampStatus_name = "getLampStatus";

            private void _iceI_getLampStatus(global::System.Collections.Generic.Dictionary<string, string> context,
                bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<LampStatus>(completed);
                outAsync.invoke(
                    _getLampStatus_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        LampStatus ret;
                        ret = (LampStatus) istr.readEnum(100);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task setLampPowerAsync(int powerLevel,
                global::Ice.OptionalContext context = new global::Ice.OptionalContext(),
                global::System.IProgress<bool> progress = null,
                global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_setLampPowerAsync(powerLevel, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_setLampPowerAsync(int iceP_powerLevel,
                global::Ice.OptionalContext context, global::System.IProgress<bool> progress,
                global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_setLampPower_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_setLampPower(iceP_powerLevel, context, synchronous, completed);
                return completed.Task;
            }

            private const string _setLampPower_name = "setLampPower";

            private void _iceI_setLampPower(int iceP_powerLevel,
                global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous,
                global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _setLampPower_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) => { ostr.writeInt(iceP_powerLevel); },
                    userException: (global::Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch (PowerLevelOutOfRange)
                        {
                            throw;
                        }
                        catch (global::Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task<int> getLampPowerAsync(
                global::Ice.OptionalContext context = new global::Ice.OptionalContext(),
                global::System.IProgress<bool> progress = null,
                global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getLampPowerAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<int> _iceI_getLampPowerAsync(
                global::Ice.OptionalContext context, global::System.IProgress<bool> progress,
                global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getLampPower_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
                _iceI_getLampPower(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getLampPower_name = "getLampPower";

            private void _iceI_getLampPower(global::System.Collections.Generic.Dictionary<string, string> context,
                bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<int>(completed);
                outAsync.invoke(
                    _getLampPower_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        int ret;
                        ret = istr.readInt();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task setColorTemperatureAsync(ColorTemperature colorTemperature,
                global::Ice.OptionalContext context = new global::Ice.OptionalContext(),
                global::System.IProgress<bool> progress = null,
                global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_setColorTemperatureAsync(colorTemperature, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_setColorTemperatureAsync(
                ColorTemperature iceP_colorTemperature, global::Ice.OptionalContext context,
                global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel,
                bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_setColorTemperature(iceP_colorTemperature, context, synchronous, completed);
                return completed.Task;
            }

            private const string _setColorTemperature_name = "setColorTemperature";

            private void _iceI_setColorTemperature(ColorTemperature iceP_colorTemperature,
                global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous,
                global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _setColorTemperature_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) => { ostr.writeEnum((int) iceP_colorTemperature, 10000); });
            }

            public global::System.Threading.Tasks.Task<ColorTemperature> getColorTemperatureAsync(
                global::Ice.OptionalContext context = new global::Ice.OptionalContext(),
                global::System.IProgress<bool> progress = null,
                global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getColorTemperatureAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<ColorTemperature> _iceI_getColorTemperatureAsync(
                global::Ice.OptionalContext context, global::System.IProgress<bool> progress,
                global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getColorTemperature_name);
                var completed =
                    new global::IceInternal.OperationTaskCompletionCallback<ColorTemperature>(progress, cancel);
                _iceI_getColorTemperature(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getColorTemperature_name = "getColorTemperature";

            private void _iceI_getColorTemperature(
                global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous,
                global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<ColorTemperature>(completed);
                outAsync.invoke(
                    _getColorTemperature_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        ColorTemperature ret;
                        ret = (ColorTemperature) istr.readEnum(10000);
                        return ret;
                    });
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_ClassicLamp_setLampStatus> begin_setLampStatus(
                LampStatus lampStatus, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_setLampStatus(lampStatus, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_setLampStatus(LampStatus lampStatus,
                global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_setLampStatus(lampStatus, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_setLampStatus(LampStatus lampStatus,
                global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_setLampStatus(lampStatus, context, callback, cookie, false);
            }

            public void end_setLampStatus(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _setLampStatus_name);
                ((global::IceInternal.OutgoingAsyncT<object>) resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_ClassicLamp_setLampStatus> begin_setLampStatus(
                LampStatus iceP_lampStatus, global::System.Collections.Generic.Dictionary<string, string> context,
                global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed =
                    new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ClassicLamp_setLampStatus,
                        object>(
                        (Callback_ClassicLamp_setLampStatus cb, object ret) =>
                        {
                            if (cb != null)
                            {
                                cb.Invoke();
                            }
                        },
                        this, _setLampStatus_name, cookie, completedCallback);
                _iceI_setLampStatus(iceP_lampStatus, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_ClassicLamp_getLampStatus> begin_getLampStatus(
                global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getLampStatus(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getLampStatus(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getLampStatus(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getLampStatus(global::Ice.OptionalContext context,
                global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getLampStatus(context, callback, cookie, false);
            }

            public LampStatus end_getLampStatus(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getLampStatus_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<LampStatus>) resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_ClassicLamp_getLampStatus> begin_getLampStatus(
                global::System.Collections.Generic.Dictionary<string, string> context,
                global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getLampStatus_name);
                var completed =
                    new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ClassicLamp_getLampStatus,
                        LampStatus>(
                        (Callback_ClassicLamp_getLampStatus cb, LampStatus ret) =>
                        {
                            if (cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _getLampStatus_name, cookie, completedCallback);
                _iceI_getLampStatus(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_ClassicLamp_setLampPower> begin_setLampPower(int powerLevel,
                global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_setLampPower(powerLevel, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_setLampPower(int powerLevel, global::Ice.AsyncCallback callback,
                object cookie)
            {
                return begin_setLampPower(powerLevel, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_setLampPower(int powerLevel, global::Ice.OptionalContext context,
                global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_setLampPower(powerLevel, context, callback, cookie, false);
            }

            public void end_setLampPower(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _setLampPower_name);
                ((global::IceInternal.OutgoingAsyncT<object>) resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_ClassicLamp_setLampPower> begin_setLampPower(int iceP_powerLevel,
                global::System.Collections.Generic.Dictionary<string, string> context,
                global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_setLampPower_name);
                var completed =
                    new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ClassicLamp_setLampPower,
                        object>(
                        (Callback_ClassicLamp_setLampPower cb, object ret) =>
                        {
                            if (cb != null)
                            {
                                cb.Invoke();
                            }
                        },
                        this, _setLampPower_name, cookie, completedCallback);
                _iceI_setLampPower(iceP_powerLevel, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_ClassicLamp_getLampPower> begin_getLampPower(
                global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getLampPower(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getLampPower(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getLampPower(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getLampPower(global::Ice.OptionalContext context,
                global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getLampPower(context, callback, cookie, false);
            }

            public int end_getLampPower(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getLampPower_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<int>) resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_ClassicLamp_getLampPower> begin_getLampPower(
                global::System.Collections.Generic.Dictionary<string, string> context,
                global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getLampPower_name);
                var completed =
                    new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_ClassicLamp_getLampPower,
                        int>(
                        (Callback_ClassicLamp_getLampPower cb, int ret) =>
                        {
                            if (cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _getLampPower_name, cookie, completedCallback);
                _iceI_getLampPower(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_LightTemperatureLamp_setColorTemperature> begin_setColorTemperature(
                ColorTemperature colorTemperature,
                global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_setColorTemperature(colorTemperature, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_setColorTemperature(ColorTemperature colorTemperature,
                global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_setColorTemperature(colorTemperature, new global::Ice.OptionalContext(), callback, cookie,
                    false);
            }

            public global::Ice.AsyncResult begin_setColorTemperature(ColorTemperature colorTemperature,
                global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_setColorTemperature(colorTemperature, context, callback, cookie, false);
            }

            public void end_setColorTemperature(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _setColorTemperature_name);
                ((global::IceInternal.OutgoingAsyncT<object>) resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_LightTemperatureLamp_setColorTemperature>
                begin_setColorTemperature(ColorTemperature iceP_colorTemperature,
                    global::System.Collections.Generic.Dictionary<string, string> context,
                    global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed =
                    new global::IceInternal.OperationAsyncResultCompletionCallback<
                        Callback_LightTemperatureLamp_setColorTemperature, object>(
                        (Callback_LightTemperatureLamp_setColorTemperature cb, object ret) =>
                        {
                            if (cb != null)
                            {
                                cb.Invoke();
                            }
                        },
                        this, _setColorTemperature_name, cookie, completedCallback);
                _iceI_setColorTemperature(iceP_colorTemperature, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_LightTemperatureLamp_getColorTemperature> begin_getColorTemperature(
                global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getColorTemperature(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getColorTemperature(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getColorTemperature(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getColorTemperature(global::Ice.OptionalContext context,
                global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getColorTemperature(context, callback, cookie, false);
            }

            public ColorTemperature end_getColorTemperature(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getColorTemperature_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<ColorTemperature>) resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_LightTemperatureLamp_getColorTemperature>
                begin_getColorTemperature(global::System.Collections.Generic.Dictionary<string, string> context,
                    global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getColorTemperature_name);
                var completed =
                    new global::IceInternal.OperationAsyncResultCompletionCallback<
                        Callback_LightTemperatureLamp_getColorTemperature, ColorTemperature>(
                        (Callback_LightTemperatureLamp_getColorTemperature cb, ColorTemperature ret) =>
                        {
                            if (cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _getColorTemperature_name, cookie, completedCallback);
                _iceI_getColorTemperature(context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static LightTemperatureLampPrx checkedCast(global::Ice.ObjectPrx b)
            {
                if (b == null)
                {
                    return null;
                }

                LightTemperatureLampPrx r = b as LightTemperatureLampPrx;
                if ((r == null) && b.ice_isA(ice_staticId()))
                {
                    LightTemperatureLampPrxHelper h = new LightTemperatureLampPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }

                return r;
            }

            public static LightTemperatureLampPrx checkedCast(global::Ice.ObjectPrx b,
                global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if (b == null)
                {
                    return null;
                }

                LightTemperatureLampPrx r = b as LightTemperatureLampPrx;
                if ((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    LightTemperatureLampPrxHelper h = new LightTemperatureLampPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }

                return r;
            }

            public static LightTemperatureLampPrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if (b == null)
                {
                    return null;
                }

                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if (bb.ice_isA(ice_staticId()))
                    {
                        LightTemperatureLampPrxHelper h = new LightTemperatureLampPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch (global::Ice.FacetNotExistException)
                {
                }

                return null;
            }

            public static LightTemperatureLampPrx checkedCast(global::Ice.ObjectPrx b, string f,
                global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if (b == null)
                {
                    return null;
                }

                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if (bb.ice_isA(ice_staticId(), ctx))
                    {
                        LightTemperatureLampPrxHelper h = new LightTemperatureLampPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch (global::Ice.FacetNotExistException)
                {
                }

                return null;
            }

            public static LightTemperatureLampPrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if (b == null)
                {
                    return null;
                }

                LightTemperatureLampPrx r = b as LightTemperatureLampPrx;
                if (r == null)
                {
                    LightTemperatureLampPrxHelper h = new LightTemperatureLampPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }

                return r;
            }

            public static LightTemperatureLampPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if (b == null)
                {
                    return null;
                }

                global::Ice.ObjectPrx bb = b.ice_facet(f);
                LightTemperatureLampPrxHelper h = new LightTemperatureLampPrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::device::lamp::ClassicLamp",
                "::device::lamp::LightTemperatureLamp"
            };

            public static string ice_staticId()
            {
                return _ids[2];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, LightTemperatureLampPrx v)
            {
                ostr.writeProxy(v);
            }

            public static LightTemperatureLampPrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if (proxy != null)
                {
                    LightTemperatureLampPrxHelper result = new LightTemperatureLampPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }

                return null;
            }

            #endregion
        }
    }
}

namespace device
{
    namespace lamp
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public abstract class ClassicLampDisp_ : global::Ice.ObjectImpl, ClassicLamp
        {
            #region Slice operations

            public abstract void setLampStatus(LampStatus lampStatus, global::Ice.Current current = null);

            public abstract LampStatus getLampStatus(global::Ice.Current current = null);

            public abstract void setLampPower(int powerLevel, global::Ice.Current current = null);

            public abstract int getLampPower(global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::device::lamp::ClassicLamp"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >=
                       0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[1];
            }

            public static new string ice_staticId()
            {
                return _ids[1];
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_setLampStatus(ClassicLamp obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                LampStatus iceP_lampStatus;
                iceP_lampStatus = (LampStatus) istr.readEnum(100);
                inS.endReadParams();
                obj.setLampStatus(iceP_lampStatus, current);
                return inS.setResult(inS.writeEmptyParams());
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_getLampStatus(ClassicLamp obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                var ret = obj.getLampStatus(current);
                var ostr = inS.startWriteParams();
                ostr.writeEnum((int) ret, 100);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_setLampPower(ClassicLamp obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                int iceP_powerLevel;
                iceP_powerLevel = istr.readInt();
                inS.endReadParams();
                obj.setLampPower(iceP_powerLevel, current);
                return inS.setResult(inS.writeEmptyParams());
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_getLampPower(ClassicLamp obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                var ret = obj.getLampPower(current);
                var ostr = inS.startWriteParams();
                ostr.writeInt(ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            private static readonly string[] _all =
            {
                "getLampPower",
                "getLampStatus",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping",
                "setLampPower",
                "setLampStatus"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation,
                    global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if (pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch (pos)
                {
                    case 0:
                    {
                        return iceD_getLampPower(this, inS, current);
                    }
                    case 1:
                    {
                        return iceD_getLampStatus(this, inS, current);
                    }
                    case 2:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 3:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 4:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 5:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                    case 6:
                    {
                        return iceD_setLampPower(this, inS, current);
                    }
                    case 7:
                    {
                        return iceD_setLampStatus(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public abstract class RgbLampDisp_ : global::Ice.ObjectImpl, RgbLamp
        {
            #region Slice operations

            public abstract void setRgbColor(RgbColor rgbColor, global::Ice.Current current = null);

            public abstract RgbColor getRgbColor(global::Ice.Current current = null);

            #endregion

            #region Inherited Slice operations

            public abstract int getLampPower(global::Ice.Current current = null);

            public abstract LampStatus getLampStatus(global::Ice.Current current = null);

            public abstract void setLampPower(int powerLevel, global::Ice.Current current = null);

            public abstract void setLampStatus(LampStatus lampStatus, global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::device::lamp::ClassicLamp",
                "::device::lamp::RgbLamp"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >=
                       0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[2];
            }

            public static new string ice_staticId()
            {
                return _ids[2];
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_setRgbColor(RgbLamp obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                RgbColor iceP_rgbColor;
                iceP_rgbColor = new RgbColor();
                iceP_rgbColor.ice_readMembers(istr);
                inS.endReadParams();
                obj.setRgbColor(iceP_rgbColor, current);
                return inS.setResult(inS.writeEmptyParams());
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_getRgbColor(RgbLamp obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                var ret = obj.getRgbColor(current);
                var ostr = inS.startWriteParams();
                ret.ice_writeMembers(ostr);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            private static readonly string[] _all =
            {
                "getLampPower",
                "getLampStatus",
                "getRgbColor",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping",
                "setLampPower",
                "setLampStatus",
                "setRgbColor"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation,
                    global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if (pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch (pos)
                {
                    case 0:
                    {
                        return ClassicLampDisp_.iceD_getLampPower(this, inS, current);
                    }
                    case 1:
                    {
                        return ClassicLampDisp_.iceD_getLampStatus(this, inS, current);
                    }
                    case 2:
                    {
                        return iceD_getRgbColor(this, inS, current);
                    }
                    case 3:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 4:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 5:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 6:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                    case 7:
                    {
                        return ClassicLampDisp_.iceD_setLampPower(this, inS, current);
                    }
                    case 8:
                    {
                        return ClassicLampDisp_.iceD_setLampStatus(this, inS, current);
                    }
                    case 9:
                    {
                        return iceD_setRgbColor(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public abstract class LightTemperatureLampDisp_ : global::Ice.ObjectImpl, LightTemperatureLamp
        {
            #region Slice operations

            public abstract void setColorTemperature(ColorTemperature colorTemperature,
                global::Ice.Current current = null);

            public abstract ColorTemperature getColorTemperature(global::Ice.Current current = null);

            #endregion

            #region Inherited Slice operations

            public abstract int getLampPower(global::Ice.Current current = null);

            public abstract LampStatus getLampStatus(global::Ice.Current current = null);

            public abstract void setLampPower(int powerLevel, global::Ice.Current current = null);

            public abstract void setLampStatus(LampStatus lampStatus, global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::device::lamp::ClassicLamp",
                "::device::lamp::LightTemperatureLamp"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >=
                       0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[2];
            }

            public static new string ice_staticId()
            {
                return _ids[2];
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_setColorTemperature(LightTemperatureLamp obj, global::IceInternal.Incoming inS,
                    global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                ColorTemperature iceP_colorTemperature;
                iceP_colorTemperature = (ColorTemperature) istr.readEnum(10000);
                inS.endReadParams();
                obj.setColorTemperature(iceP_colorTemperature, current);
                return inS.setResult(inS.writeEmptyParams());
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_getColorTemperature(LightTemperatureLamp obj, global::IceInternal.Incoming inS,
                    global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                var ret = obj.getColorTemperature(current);
                var ostr = inS.startWriteParams();
                ostr.writeEnum((int) ret, 10000);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            private static readonly string[] _all =
            {
                "getColorTemperature",
                "getLampPower",
                "getLampStatus",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping",
                "setColorTemperature",
                "setLampPower",
                "setLampStatus"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation,
                    global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if (pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch (pos)
                {
                    case 0:
                    {
                        return iceD_getColorTemperature(this, inS, current);
                    }
                    case 1:
                    {
                        return ClassicLampDisp_.iceD_getLampPower(this, inS, current);
                    }
                    case 2:
                    {
                        return ClassicLampDisp_.iceD_getLampStatus(this, inS, current);
                    }
                    case 3:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 4:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 5:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 6:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                    case 7:
                    {
                        return iceD_setColorTemperature(this, inS, current);
                    }
                    case 8:
                    {
                        return ClassicLampDisp_.iceD_setLampPower(this, inS, current);
                    }
                    case 9:
                    {
                        return ClassicLampDisp_.iceD_setLampStatus(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }
    }
}