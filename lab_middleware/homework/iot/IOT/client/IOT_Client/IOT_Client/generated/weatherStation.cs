//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.7
//
// <auto-generated>
//
// Generated from file `weatherStation.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace device
{
    namespace weather
    {
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [global::System.Serializable]
        public partial struct WeatherInfo
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public double temperature;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public double humidity;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public double pressure;

            #endregion

            partial void ice_initialize();

            #region Constructor

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public WeatherInfo(double temperature, double humidity, double pressure)
            {
                this.temperature = temperature;
                this.humidity = humidity;
                this.pressure = pressure;
                ice_initialize();
            }

            #endregion

            #region Object members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                global::IceInternal.HashUtil.hashAdd(ref h_, "::device::weather::WeatherInfo");
                global::IceInternal.HashUtil.hashAdd(ref h_, temperature);
                global::IceInternal.HashUtil.hashAdd(ref h_, humidity);
                global::IceInternal.HashUtil.hashAdd(ref h_, pressure);
                return h_;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override bool Equals(object other)
            {
                if (!(other is WeatherInfo))
                {
                    return false;
                }

                WeatherInfo o = (WeatherInfo) other;
                if (!this.temperature.Equals(o.temperature))
                {
                    return false;
                }

                if (!this.humidity.Equals(o.humidity))
                {
                    return false;
                }

                if (!this.pressure.Equals(o.pressure))
                {
                    return false;
                }

                return true;
            }

            #endregion

            #region Comparison members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator ==(WeatherInfo lhs, WeatherInfo rhs)
            {
                return Equals(lhs, rhs);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator !=(WeatherInfo lhs, WeatherInfo rhs)
            {
                return !Equals(lhs, rhs);
            }

            #endregion

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public void ice_writeMembers(global::Ice.OutputStream ostr)
            {
                ostr.writeDouble(this.temperature);
                ostr.writeDouble(this.humidity);
                ostr.writeDouble(this.pressure);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public void ice_readMembers(global::Ice.InputStream istr)
            {
                this.temperature = istr.readDouble();
                this.humidity = istr.readDouble();
                this.pressure = istr.readDouble();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static void ice_write(global::Ice.OutputStream ostr, WeatherInfo v)
            {
                v.ice_writeMembers(ostr);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static WeatherInfo ice_read(global::Ice.InputStream istr)
            {
                var v = new WeatherInfo();
                v.ice_readMembers(istr);
                return v;
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface WeatherStation : global::Ice.Object, WeatherStationOperations_
        {
        }
    }
}

namespace device
{
    namespace weather
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_WeatherStation_getWeatherInfo(WeatherInfo ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_WeatherStation_getCurrentTime(string ret);
    }
}

namespace device
{
    namespace weather
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface WeatherStationPrx : global::Ice.ObjectPrx
        {
            WeatherInfo getWeatherInfo(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<WeatherInfo> getWeatherInfoAsync(
                global::Ice.OptionalContext context = new global::Ice.OptionalContext(),
                global::System.IProgress<bool> progress = null,
                global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_WeatherStation_getWeatherInfo> begin_getWeatherInfo(
                global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_getWeatherInfo(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_getWeatherInfo(global::Ice.OptionalContext context,
                global::Ice.AsyncCallback callback, object cookie);

            WeatherInfo end_getWeatherInfo(global::Ice.AsyncResult asyncResult);

            string getCurrentTime(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<string> getCurrentTimeAsync(
                global::Ice.OptionalContext context = new global::Ice.OptionalContext(),
                global::System.IProgress<bool> progress = null,
                global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_WeatherStation_getCurrentTime> begin_getCurrentTime(
                global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_getCurrentTime(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_getCurrentTime(global::Ice.OptionalContext context,
                global::Ice.AsyncCallback callback, object cookie);

            string end_getCurrentTime(global::Ice.AsyncResult asyncResult);
        }
    }
}

namespace device
{
    namespace weather
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface WeatherStationOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            WeatherInfo getWeatherInfo(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            string getCurrentTime(global::Ice.Current current = null);
        }
    }
}

namespace device
{
    namespace weather
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        [global::System.Serializable]
        public sealed class WeatherStationPrxHelper : global::Ice.ObjectPrxHelperBase, WeatherStationPrx
        {
            public WeatherStationPrxHelper()
            {
            }

            public WeatherStationPrxHelper(global::System.Runtime.Serialization.SerializationInfo info,
                global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public WeatherInfo getWeatherInfo(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getWeatherInfoAsync(context, null, global::System.Threading.CancellationToken.None,
                        true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public string getCurrentTime(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getCurrentTimeAsync(context, null, global::System.Threading.CancellationToken.None,
                        true).Result;
                }
                catch (global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task<WeatherInfo> getWeatherInfoAsync(
                global::Ice.OptionalContext context = new global::Ice.OptionalContext(),
                global::System.IProgress<bool> progress = null,
                global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getWeatherInfoAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<WeatherInfo> _iceI_getWeatherInfoAsync(
                global::Ice.OptionalContext context, global::System.IProgress<bool> progress,
                global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getWeatherInfo_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<WeatherInfo>(progress, cancel);
                _iceI_getWeatherInfo(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getWeatherInfo_name = "getWeatherInfo";

            private void _iceI_getWeatherInfo(global::System.Collections.Generic.Dictionary<string, string> context,
                bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<WeatherInfo>(completed);
                outAsync.invoke(
                    _getWeatherInfo_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        WeatherInfo ret = new WeatherInfo();
                        ret.ice_readMembers(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<string> getCurrentTimeAsync(
                global::Ice.OptionalContext context = new global::Ice.OptionalContext(),
                global::System.IProgress<bool> progress = null,
                global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getCurrentTimeAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<string> _iceI_getCurrentTimeAsync(
                global::Ice.OptionalContext context, global::System.IProgress<bool> progress,
                global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getCurrentTime_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<string>(progress, cancel);
                _iceI_getCurrentTime(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getCurrentTime_name = "getCurrentTime";

            private void _iceI_getCurrentTime(global::System.Collections.Generic.Dictionary<string, string> context,
                bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<string>(completed);
                outAsync.invoke(
                    _getCurrentTime_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        string ret;
                        ret = istr.readString();
                        return ret;
                    });
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_WeatherStation_getWeatherInfo> begin_getWeatherInfo(
                global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getWeatherInfo(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getWeatherInfo(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getWeatherInfo(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getWeatherInfo(global::Ice.OptionalContext context,
                global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getWeatherInfo(context, callback, cookie, false);
            }

            public WeatherInfo end_getWeatherInfo(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getWeatherInfo_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<WeatherInfo>) resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_WeatherStation_getWeatherInfo> begin_getWeatherInfo(
                global::System.Collections.Generic.Dictionary<string, string> context,
                global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getWeatherInfo_name);
                var completed =
                    new global::IceInternal.OperationAsyncResultCompletionCallback<
                        Callback_WeatherStation_getWeatherInfo, WeatherInfo>(
                        (Callback_WeatherStation_getWeatherInfo cb, WeatherInfo ret) =>
                        {
                            if (cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _getWeatherInfo_name, cookie, completedCallback);
                _iceI_getWeatherInfo(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_WeatherStation_getCurrentTime> begin_getCurrentTime(
                global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getCurrentTime(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getCurrentTime(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getCurrentTime(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getCurrentTime(global::Ice.OptionalContext context,
                global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getCurrentTime(context, callback, cookie, false);
            }

            public string end_getCurrentTime(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getCurrentTime_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<string>) resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_WeatherStation_getCurrentTime> begin_getCurrentTime(
                global::System.Collections.Generic.Dictionary<string, string> context,
                global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getCurrentTime_name);
                var completed =
                    new global::IceInternal.OperationAsyncResultCompletionCallback<
                        Callback_WeatherStation_getCurrentTime, string>(
                        (Callback_WeatherStation_getCurrentTime cb, string ret) =>
                        {
                            if (cb != null)
                            {
                                cb.Invoke(ret);
                            }
                        },
                        this, _getCurrentTime_name, cookie, completedCallback);
                _iceI_getCurrentTime(context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static WeatherStationPrx checkedCast(global::Ice.ObjectPrx b)
            {
                if (b == null)
                {
                    return null;
                }

                WeatherStationPrx r = b as WeatherStationPrx;
                if ((r == null) && b.ice_isA(ice_staticId()))
                {
                    WeatherStationPrxHelper h = new WeatherStationPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }

                return r;
            }

            public static WeatherStationPrx checkedCast(global::Ice.ObjectPrx b,
                global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if (b == null)
                {
                    return null;
                }

                WeatherStationPrx r = b as WeatherStationPrx;
                if ((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    WeatherStationPrxHelper h = new WeatherStationPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }

                return r;
            }

            public static WeatherStationPrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if (b == null)
                {
                    return null;
                }

                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if (bb.ice_isA(ice_staticId()))
                    {
                        WeatherStationPrxHelper h = new WeatherStationPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch (global::Ice.FacetNotExistException)
                {
                }

                return null;
            }

            public static WeatherStationPrx checkedCast(global::Ice.ObjectPrx b, string f,
                global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if (b == null)
                {
                    return null;
                }

                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if (bb.ice_isA(ice_staticId(), ctx))
                    {
                        WeatherStationPrxHelper h = new WeatherStationPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch (global::Ice.FacetNotExistException)
                {
                }

                return null;
            }

            public static WeatherStationPrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if (b == null)
                {
                    return null;
                }

                WeatherStationPrx r = b as WeatherStationPrx;
                if (r == null)
                {
                    WeatherStationPrxHelper h = new WeatherStationPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }

                return r;
            }

            public static WeatherStationPrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if (b == null)
                {
                    return null;
                }

                global::Ice.ObjectPrx bb = b.ice_facet(f);
                WeatherStationPrxHelper h = new WeatherStationPrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::device::weather::WeatherStation"
            };

            public static string ice_staticId()
            {
                return _ids[1];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, WeatherStationPrx v)
            {
                ostr.writeProxy(v);
            }

            public static WeatherStationPrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if (proxy != null)
                {
                    WeatherStationPrxHelper result = new WeatherStationPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }

                return null;
            }

            #endregion
        }
    }
}

namespace device
{
    namespace weather
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public abstract class WeatherStationDisp_ : global::Ice.ObjectImpl, WeatherStation
        {
            #region Slice operations

            public abstract WeatherInfo getWeatherInfo(global::Ice.Current current = null);

            public abstract string getCurrentTime(global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::device::weather::WeatherStation"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >=
                       0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[1];
            }

            public static new string ice_staticId()
            {
                return _ids[1];
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_getWeatherInfo(WeatherStation obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                var ret = obj.getWeatherInfo(current);
                var ostr = inS.startWriteParams();
                ret.ice_writeMembers(ostr);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceD_getCurrentTime(WeatherStation obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                var ret = obj.getCurrentTime(current);
                var ostr = inS.startWriteParams();
                ostr.writeString(ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            private static readonly string[] _all =
            {
                "getCurrentTime",
                "getWeatherInfo",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
                iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation,
                    global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if (pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch (pos)
                {
                    case 0:
                    {
                        return iceD_getCurrentTime(this, inS, current);
                    }
                    case 1:
                    {
                        return iceD_getWeatherInfo(this, inS, current);
                    }
                    case 2:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 3:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 4:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 5:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }
    }
}