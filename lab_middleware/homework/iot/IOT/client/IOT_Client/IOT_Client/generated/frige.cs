//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.7
//
// <auto-generated>
//
// Generated from file `frige.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace device
{
    namespace fridge
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public enum FreezingLevel
        {
            MIN,
            AVERAGE,
            MAX
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public sealed class FreezingLevelHelper
        {
            public static void write(global::Ice.OutputStream ostr, FreezingLevel v)
            {
                ostr.writeEnum((int)v, 2);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static FreezingLevel read(global::Ice.InputStream istr)
            {
                FreezingLevel v;
                v = (FreezingLevel)istr.readEnum(2);
                return v;
            }
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
        [global::System.Serializable]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class NoSpace : global::Ice.UserException
        {
            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public NoSpace()
            {
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public NoSpace(global::System.Exception ex) : base(ex)
            {
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public NoSpace(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #endregion

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override string ice_id()
            {
                return "::device::fridge::NoSpace";
            }

            #region Object members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                global::IceInternal.HashUtil.hashAdd(ref h_, "::device::fridge::NoSpace");
                return h_;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override bool Equals(object other)
            {
                if(other == null)
                {
                    return false;
                }
                if(object.ReferenceEquals(this, other))
                {
                    return true;
                }
                NoSpace o = other as NoSpace;
                if(o == null)
                {
                    return false;
                }
                return true;
            }

            #endregion

            #region Comparison members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator==(NoSpace lhs, NoSpace rhs)
            {
                return Equals(lhs, rhs);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator!=(NoSpace lhs, NoSpace rhs)
            {
                return !Equals(lhs, rhs);
            }

            #endregion

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice("::device::fridge::NoSpace", -1, true);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.endSlice();
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
        [global::System.Serializable]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class NoProduct : global::Ice.UserException
        {
            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public NoProduct()
            {
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public NoProduct(global::System.Exception ex) : base(ex)
            {
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public NoProduct(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #endregion

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override string ice_id()
            {
                return "::device::fridge::NoProduct";
            }

            #region Object members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                global::IceInternal.HashUtil.hashAdd(ref h_, "::device::fridge::NoProduct");
                return h_;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override bool Equals(object other)
            {
                if(other == null)
                {
                    return false;
                }
                if(object.ReferenceEquals(this, other))
                {
                    return true;
                }
                NoProduct o = other as NoProduct;
                if(o == null)
                {
                    return false;
                }
                return true;
            }

            #endregion

            #region Comparison members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator==(NoProduct lhs, NoProduct rhs)
            {
                return Equals(lhs, rhs);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator!=(NoProduct lhs, NoProduct rhs)
            {
                return !Equals(lhs, rhs);
            }

            #endregion

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice("::device::fridge::NoProduct", -1, true);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.endSlice();
            }

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
        [global::System.Serializable]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class BadDateFormat : global::Ice.UserException
        {
            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public BadDateFormat()
            {
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public BadDateFormat(global::System.Exception ex) : base(ex)
            {
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public BadDateFormat(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #endregion

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override string ice_id()
            {
                return "::device::fridge::BadDateFormat";
            }

            #region Object members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                global::IceInternal.HashUtil.hashAdd(ref h_, "::device::fridge::BadDateFormat");
                return h_;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override bool Equals(object other)
            {
                if(other == null)
                {
                    return false;
                }
                if(object.ReferenceEquals(this, other))
                {
                    return true;
                }
                BadDateFormat o = other as BadDateFormat;
                if(o == null)
                {
                    return false;
                }
                return true;
            }

            #endregion

            #region Comparison members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator==(BadDateFormat lhs, BadDateFormat rhs)
            {
                return Equals(lhs, rhs);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator!=(BadDateFormat lhs, BadDateFormat rhs)
            {
                return !Equals(lhs, rhs);
            }

            #endregion

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            protected override void iceWriteImpl(global::Ice.OutputStream ostr_)
            {
                ostr_.startSlice("::device::fridge::BadDateFormat", -1, true);
                ostr_.endSlice();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            protected override void iceReadImpl(global::Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.endSlice();
            }

            #endregion
        }

        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [global::System.Serializable]
        public partial class Product : global::System.ICloneable
        {
            #region Slice data members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public string name;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public double size;

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public string expirationDate;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public Product()
            {
                this.name = "";
                this.expirationDate = "";
                ice_initialize();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public Product(string name, double size, string expirationDate)
            {
                this.name = name;
                this.size = size;
                this.expirationDate = expirationDate;
                ice_initialize();
            }

            #endregion

            #region ICloneable members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public object Clone()
            {
                return MemberwiseClone();
            }

            #endregion

            #region Object members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                global::IceInternal.HashUtil.hashAdd(ref h_, "::device::fridge::Product");
                global::IceInternal.HashUtil.hashAdd(ref h_, name);
                global::IceInternal.HashUtil.hashAdd(ref h_, size);
                global::IceInternal.HashUtil.hashAdd(ref h_, expirationDate);
                return h_;
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public override bool Equals(object other)
            {
                if(object.ReferenceEquals(this, other))
                {
                    return true;
                }
                if(other == null)
                {
                    return false;
                }
                if(GetType() != other.GetType())
                {
                    return false;
                }
                Product o = (Product)other;
                if(this.name == null)
                {
                    if(o.name != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.name.Equals(o.name))
                    {
                        return false;
                    }
                }
                if(!this.size.Equals(o.size))
                {
                    return false;
                }
                if(this.expirationDate == null)
                {
                    if(o.expirationDate != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.expirationDate.Equals(o.expirationDate))
                    {
                        return false;
                    }
                }
                return true;
            }

            #endregion

            #region Comparison members

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator==(Product lhs, Product rhs)
            {
                return Equals(lhs, rhs);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static bool operator!=(Product lhs, Product rhs)
            {
                return !Equals(lhs, rhs);
            }

            #endregion

            #region Marshaling support

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public void ice_writeMembers(global::Ice.OutputStream ostr)
            {
                ostr.writeString(this.name);
                ostr.writeDouble(this.size);
                ostr.writeString(this.expirationDate);
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public void ice_readMembers(global::Ice.InputStream istr)
            {
                this.name = istr.readString();
                this.size = istr.readDouble();
                this.expirationDate = istr.readString();
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static void ice_write(global::Ice.OutputStream ostr, Product v)
            {
                if(v == null)
                {
                    _nullMarshalValue.ice_writeMembers(ostr);
                }
                else
                {
                    v.ice_writeMembers(ostr);
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            public static Product ice_read(global::Ice.InputStream istr)
            {
                var v = new Product();
                v.ice_readMembers(istr);
                return v;
            }

            private static readonly Product _nullMarshalValue = new Product();

            #endregion
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface BasicFridge : global::Ice.Object, BasicFridgeOperations_
        {
        }
    }
}

namespace device
{
    namespace fridge
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BasicFridge_addProduct();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BasicFridge_takeProductOutByName(Product ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BasicFridge_getProductsIn(Product[] ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BasicFridge_numberOfProductsIn(int ret);

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BasicFridge_setFreezingLevel();

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public delegate void Callback_BasicFridge_getFreezingLevel(FreezingLevel ret);
    }
}

namespace device
{
    namespace fridge
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface BasicFridgePrx : global::Ice.ObjectPrx
        {
            void addProduct(Product product, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task addProductAsync(Product product, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_BasicFridge_addProduct> begin_addProduct(Product product, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_addProduct(Product product, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_addProduct(Product product, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_addProduct(global::Ice.AsyncResult asyncResult);

            Product takeProductOutByName(string productName, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<Product> takeProductOutByNameAsync(string productName, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_BasicFridge_takeProductOutByName> begin_takeProductOutByName(string productName, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_takeProductOutByName(string productName, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_takeProductOutByName(string productName, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            Product end_takeProductOutByName(global::Ice.AsyncResult asyncResult);

            Product[] getProductsIn(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<Product[]> getProductsInAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_BasicFridge_getProductsIn> begin_getProductsIn(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_getProductsIn(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_getProductsIn(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            Product[] end_getProductsIn(global::Ice.AsyncResult asyncResult);

            int numberOfProductsIn(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<int> numberOfProductsInAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_BasicFridge_numberOfProductsIn> begin_numberOfProductsIn(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_numberOfProductsIn(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_numberOfProductsIn(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            int end_numberOfProductsIn(global::Ice.AsyncResult asyncResult);

            void setFreezingLevel(FreezingLevel freezingLevel, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task setFreezingLevelAsync(FreezingLevel freezingLevel, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_BasicFridge_setFreezingLevel> begin_setFreezingLevel(FreezingLevel freezingLevel, global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_setFreezingLevel(FreezingLevel freezingLevel, global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_setFreezingLevel(FreezingLevel freezingLevel, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            void end_setFreezingLevel(global::Ice.AsyncResult asyncResult);

            FreezingLevel getFreezingLevel(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::System.Threading.Tasks.Task<FreezingLevel> getFreezingLevelAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken());

            global::Ice.AsyncResult<Callback_BasicFridge_getFreezingLevel> begin_getFreezingLevel(global::Ice.OptionalContext context = new global::Ice.OptionalContext());

            global::Ice.AsyncResult begin_getFreezingLevel(global::Ice.AsyncCallback callback, object cookie);

            global::Ice.AsyncResult begin_getFreezingLevel(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie);

            FreezingLevel end_getFreezingLevel(global::Ice.AsyncResult asyncResult);
        }
    }
}

namespace device
{
    namespace fridge
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public interface BasicFridgeOperations_
        {
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            void addProduct(Product product, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            Product takeProductOutByName(string productName, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            Product[] getProductsIn(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            int numberOfProductsIn(global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            void setFreezingLevel(FreezingLevel freezingLevel, global::Ice.Current current = null);

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
            FreezingLevel getFreezingLevel(global::Ice.Current current = null);
        }
    }
}

namespace device
{
    namespace fridge
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public sealed class ProductsHelper
        {
            public static void write(global::Ice.OutputStream ostr, Product[] v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Length);
                    for(int ix = 0; ix < v.Length; ++ix)
                    {
                        (v[ix] == null ? new Product() : v[ix]).ice_writeMembers(ostr);
                    }
                }
            }

            public static Product[] read(global::Ice.InputStream istr)
            {
                Product[] v;
                {
                    int szx = istr.readAndCheckSeqSize(10);
                    v = new Product[szx];
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        v[ix] = new Product();
                        v[ix].ice_readMembers(istr);
                    }
                }
                return v;
            }
        }

        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        [global::System.Serializable]
        public sealed class BasicFridgePrxHelper : global::Ice.ObjectPrxHelperBase, BasicFridgePrx
        {
            public BasicFridgePrxHelper()
            {
            }

            public BasicFridgePrxHelper(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public void addProduct(Product product, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_addProductAsync(product, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public Product takeProductOutByName(string productName, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_takeProductOutByNameAsync(productName, context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public Product[] getProductsIn(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getProductsInAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public int numberOfProductsIn(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_numberOfProductsInAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void setFreezingLevel(FreezingLevel freezingLevel, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    _iceI_setFreezingLevelAsync(freezingLevel, context, null, global::System.Threading.CancellationToken.None, true).Wait();
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public FreezingLevel getFreezingLevel(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                try
                {
                    return _iceI_getFreezingLevelAsync(context, null, global::System.Threading.CancellationToken.None, true).Result;
                }
                catch(global::System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public global::System.Threading.Tasks.Task addProductAsync(Product product, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_addProductAsync(product, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_addProductAsync(Product iceP_product, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_addProduct_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_addProduct(iceP_product, context, synchronous, completed);
                return completed.Task;
            }

            private const string _addProduct_name = "addProduct";

            private void _iceI_addProduct(Product iceP_product, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _addProduct_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        Product.ice_write(ostr, iceP_product);
                    },
                    userException: (global::Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(BadDateFormat)
                        {
                            throw;
                        }
                        catch(NoSpace)
                        {
                            throw;
                        }
                        catch(global::Ice.UserException)
                        {
                        }
                    });
            }

            public global::System.Threading.Tasks.Task<Product> takeProductOutByNameAsync(string productName, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_takeProductOutByNameAsync(productName, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Product> _iceI_takeProductOutByNameAsync(string iceP_productName, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_takeProductOutByName_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Product>(progress, cancel);
                _iceI_takeProductOutByName(iceP_productName, context, synchronous, completed);
                return completed.Task;
            }

            private const string _takeProductOutByName_name = "takeProductOutByName";

            private void _iceI_takeProductOutByName(string iceP_productName, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Product>(completed);
                outAsync.invoke(
                    _takeProductOutByName_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_productName);
                    },
                    userException: (global::Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(NoProduct)
                        {
                            throw;
                        }
                        catch(global::Ice.UserException)
                        {
                        }
                    },
                    read: (global::Ice.InputStream istr) =>
                    {
                        Product ret = null;
                        ret = Product.ice_read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<Product[]> getProductsInAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getProductsInAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<Product[]> _iceI_getProductsInAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getProductsIn_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<Product[]>(progress, cancel);
                _iceI_getProductsIn(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getProductsIn_name = "getProductsIn";

            private void _iceI_getProductsIn(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<Product[]>(completed);
                outAsync.invoke(
                    _getProductsIn_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        Product[] ret;
                        ret = ProductsHelper.read(istr);
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task<int> numberOfProductsInAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_numberOfProductsInAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<int> _iceI_numberOfProductsInAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_numberOfProductsIn_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<int>(progress, cancel);
                _iceI_numberOfProductsIn(context, synchronous, completed);
                return completed.Task;
            }

            private const string _numberOfProductsIn_name = "numberOfProductsIn";

            private void _iceI_numberOfProductsIn(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<int>(completed);
                outAsync.invoke(
                    _numberOfProductsIn_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        int ret;
                        ret = istr.readInt();
                        return ret;
                    });
            }

            public global::System.Threading.Tasks.Task setFreezingLevelAsync(FreezingLevel freezingLevel, global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_setFreezingLevelAsync(freezingLevel, context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task _iceI_setFreezingLevelAsync(FreezingLevel iceP_freezingLevel, global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new global::IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_setFreezingLevel(iceP_freezingLevel, context, synchronous, completed);
                return completed.Task;
            }

            private const string _setFreezingLevel_name = "setFreezingLevel";

            private void _iceI_setFreezingLevel(FreezingLevel iceP_freezingLevel, global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _setFreezingLevel_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (global::Ice.OutputStream ostr) =>
                    {
                        ostr.writeEnum((int)iceP_freezingLevel, 2);
                    });
            }

            public global::System.Threading.Tasks.Task<FreezingLevel> getFreezingLevelAsync(global::Ice.OptionalContext context = new global::Ice.OptionalContext(), global::System.IProgress<bool> progress = null, global::System.Threading.CancellationToken cancel = new global::System.Threading.CancellationToken())
            {
                return _iceI_getFreezingLevelAsync(context, progress, cancel, false);
            }

            private global::System.Threading.Tasks.Task<FreezingLevel> _iceI_getFreezingLevelAsync(global::Ice.OptionalContext context, global::System.IProgress<bool> progress, global::System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_getFreezingLevel_name);
                var completed = new global::IceInternal.OperationTaskCompletionCallback<FreezingLevel>(progress, cancel);
                _iceI_getFreezingLevel(context, synchronous, completed);
                return completed.Task;
            }

            private const string _getFreezingLevel_name = "getFreezingLevel";

            private void _iceI_getFreezingLevel(global::System.Collections.Generic.Dictionary<string, string> context, bool synchronous, global::IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<FreezingLevel>(completed);
                outAsync.invoke(
                    _getFreezingLevel_name,
                    global::Ice.OperationMode.Normal,
                    global::Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    read: (global::Ice.InputStream istr) =>
                    {
                        FreezingLevel ret;
                        ret = (FreezingLevel)istr.readEnum(2);
                        return ret;
                    });
            }

            #endregion

            #region Asynchronous operations

            public global::Ice.AsyncResult<Callback_BasicFridge_addProduct> begin_addProduct(Product product, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_addProduct(product, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_addProduct(Product product, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_addProduct(product, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_addProduct(Product product, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_addProduct(product, context, callback, cookie, false);
            }

            public void end_addProduct(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _addProduct_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BasicFridge_addProduct> begin_addProduct(Product iceP_product, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_addProduct_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BasicFridge_addProduct, object>(
                    (Callback_BasicFridge_addProduct cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _addProduct_name, cookie, completedCallback);
                _iceI_addProduct(iceP_product, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BasicFridge_takeProductOutByName> begin_takeProductOutByName(string productName, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_takeProductOutByName(productName, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_takeProductOutByName(string productName, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_takeProductOutByName(productName, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_takeProductOutByName(string productName, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_takeProductOutByName(productName, context, callback, cookie, false);
            }

            public Product end_takeProductOutByName(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _takeProductOutByName_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<Product>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BasicFridge_takeProductOutByName> begin_takeProductOutByName(string iceP_productName, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_takeProductOutByName_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BasicFridge_takeProductOutByName, Product>(
                    (Callback_BasicFridge_takeProductOutByName cb, Product ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _takeProductOutByName_name, cookie, completedCallback);
                _iceI_takeProductOutByName(iceP_productName, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BasicFridge_getProductsIn> begin_getProductsIn(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getProductsIn(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getProductsIn(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getProductsIn(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getProductsIn(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getProductsIn(context, callback, cookie, false);
            }

            public Product[] end_getProductsIn(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getProductsIn_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<Product[]>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BasicFridge_getProductsIn> begin_getProductsIn(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getProductsIn_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BasicFridge_getProductsIn, Product[]>(
                    (Callback_BasicFridge_getProductsIn cb, Product[] ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getProductsIn_name, cookie, completedCallback);
                _iceI_getProductsIn(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BasicFridge_numberOfProductsIn> begin_numberOfProductsIn(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_numberOfProductsIn(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_numberOfProductsIn(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_numberOfProductsIn(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_numberOfProductsIn(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_numberOfProductsIn(context, callback, cookie, false);
            }

            public int end_numberOfProductsIn(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _numberOfProductsIn_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<int>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BasicFridge_numberOfProductsIn> begin_numberOfProductsIn(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_numberOfProductsIn_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BasicFridge_numberOfProductsIn, int>(
                    (Callback_BasicFridge_numberOfProductsIn cb, int ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _numberOfProductsIn_name, cookie, completedCallback);
                _iceI_numberOfProductsIn(context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BasicFridge_setFreezingLevel> begin_setFreezingLevel(FreezingLevel freezingLevel, global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_setFreezingLevel(freezingLevel, context, null, null, false);
            }

            public global::Ice.AsyncResult begin_setFreezingLevel(FreezingLevel freezingLevel, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_setFreezingLevel(freezingLevel, new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_setFreezingLevel(FreezingLevel freezingLevel, global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_setFreezingLevel(freezingLevel, context, callback, cookie, false);
            }

            public void end_setFreezingLevel(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _setFreezingLevel_name);
                ((global::IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BasicFridge_setFreezingLevel> begin_setFreezingLevel(FreezingLevel iceP_freezingLevel, global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BasicFridge_setFreezingLevel, object>(
                    (Callback_BasicFridge_setFreezingLevel cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _setFreezingLevel_name, cookie, completedCallback);
                _iceI_setFreezingLevel(iceP_freezingLevel, context, synchronous, completed);
                return completed;
            }

            public global::Ice.AsyncResult<Callback_BasicFridge_getFreezingLevel> begin_getFreezingLevel(global::Ice.OptionalContext context = new global::Ice.OptionalContext())
            {
                return begin_getFreezingLevel(context, null, null, false);
            }

            public global::Ice.AsyncResult begin_getFreezingLevel(global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getFreezingLevel(new global::Ice.OptionalContext(), callback, cookie, false);
            }

            public global::Ice.AsyncResult begin_getFreezingLevel(global::Ice.OptionalContext context, global::Ice.AsyncCallback callback, object cookie)
            {
                return begin_getFreezingLevel(context, callback, cookie, false);
            }

            public FreezingLevel end_getFreezingLevel(global::Ice.AsyncResult asyncResult)
            {
                var resultI_ = global::IceInternal.AsyncResultI.check(asyncResult, this, _getFreezingLevel_name);
                var outgoing_ = (global::IceInternal.OutgoingAsyncT<FreezingLevel>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private global::Ice.AsyncResult<Callback_BasicFridge_getFreezingLevel> begin_getFreezingLevel(global::System.Collections.Generic.Dictionary<string, string> context, global::Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_getFreezingLevel_name);
                var completed = new global::IceInternal.OperationAsyncResultCompletionCallback<Callback_BasicFridge_getFreezingLevel, FreezingLevel>(
                    (Callback_BasicFridge_getFreezingLevel cb, FreezingLevel ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _getFreezingLevel_name, cookie, completedCallback);
                _iceI_getFreezingLevel(context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static BasicFridgePrx checkedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                BasicFridgePrx r = b as BasicFridgePrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    BasicFridgePrxHelper h = new BasicFridgePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static BasicFridgePrx checkedCast(global::Ice.ObjectPrx b, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                BasicFridgePrx r = b as BasicFridgePrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    BasicFridgePrxHelper h = new BasicFridgePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static BasicFridgePrx checkedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        BasicFridgePrxHelper h = new BasicFridgePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static BasicFridgePrx checkedCast(global::Ice.ObjectPrx b, string f, global::System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        BasicFridgePrxHelper h = new BasicFridgePrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(global::Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static BasicFridgePrx uncheckedCast(global::Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                BasicFridgePrx r = b as BasicFridgePrx;
                if(r == null)
                {
                    BasicFridgePrxHelper h = new BasicFridgePrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static BasicFridgePrx uncheckedCast(global::Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                global::Ice.ObjectPrx bb = b.ice_facet(f);
                BasicFridgePrxHelper h = new BasicFridgePrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::device::fridge::BasicFridge"
            };

            public static string ice_staticId()
            {
                return _ids[1];
            }

            #endregion

            #region Marshaling support

            public static void write(global::Ice.OutputStream ostr, BasicFridgePrx v)
            {
                ostr.writeProxy(v);
            }

            public static BasicFridgePrx read(global::Ice.InputStream istr)
            {
                global::Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    BasicFridgePrxHelper result = new BasicFridgePrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }
    }
}

namespace device
{
    namespace fridge
    {
        [global::System.Runtime.InteropServices.ComVisible(false)]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.7")]
        public abstract class BasicFridgeDisp_ : global::Ice.ObjectImpl, BasicFridge
        {
            #region Slice operations

            public abstract void addProduct(Product product, global::Ice.Current current = null);

            public abstract Product takeProductOutByName(string productName, global::Ice.Current current = null);

            public abstract Product[] getProductsIn(global::Ice.Current current = null);

            public abstract int numberOfProductsIn(global::Ice.Current current = null);

            public abstract void setFreezingLevel(FreezingLevel freezingLevel, global::Ice.Current current = null);

            public abstract FreezingLevel getFreezingLevel(global::Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::Ice::Object",
                "::device::fridge::BasicFridge"
            };

            public override bool ice_isA(string s, global::Ice.Current current = null)
            {
                return global::System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(global::Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(global::Ice.Current current = null)
            {
                return _ids[1];
            }

            public static new string ice_staticId()
            {
                return _ids[1];
            }

            #endregion

            #region Operation dispatch

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_addProduct(BasicFridge obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                Product iceP_product;
                iceP_product = null;
                iceP_product = Product.ice_read(istr);
                inS.endReadParams();
                obj.addProduct(iceP_product, current);
                return inS.setResult(inS.writeEmptyParams());
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_takeProductOutByName(BasicFridge obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                string iceP_productName;
                iceP_productName = istr.readString();
                inS.endReadParams();
                var ret = obj.takeProductOutByName(iceP_productName, current);
                var ostr = inS.startWriteParams();
                Product.ice_write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getProductsIn(BasicFridge obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                var ret = obj.getProductsIn(current);
                var ostr = inS.startWriteParams();
                ProductsHelper.write(ostr, ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_numberOfProductsIn(BasicFridge obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                var ret = obj.numberOfProductsIn(current);
                var ostr = inS.startWriteParams();
                ostr.writeInt(ret);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_setFreezingLevel(BasicFridge obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                FreezingLevel iceP_freezingLevel;
                iceP_freezingLevel = (FreezingLevel)istr.readEnum(2);
                inS.endReadParams();
                obj.setFreezingLevel(iceP_freezingLevel, current);
                return inS.setResult(inS.writeEmptyParams());
            }

            [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceD_getFreezingLevel(BasicFridge obj, global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                global::Ice.ObjectImpl.iceCheckMode(global::Ice.OperationMode.Normal, current.mode);
                inS.readEmptyParams();
                var ret = obj.getFreezingLevel(current);
                var ostr = inS.startWriteParams();
                ostr.writeEnum((int)ret, 2);
                inS.endWriteParams(ostr);
                return inS.setResult(ostr);
            }

            private static readonly string[] _all =
            {
                "addProduct",
                "getFreezingLevel",
                "getProductsIn",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping",
                "numberOfProductsIn",
                "setFreezingLevel",
                "takeProductOutByName"
            };

            public override global::System.Threading.Tasks.Task<global::Ice.OutputStream>
            iceDispatch(global::IceInternal.Incoming inS, global::Ice.Current current)
            {
                int pos = global::System.Array.BinarySearch(_all, current.operation, global::IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return iceD_addProduct(this, inS, current);
                    }
                    case 1:
                    {
                        return iceD_getFreezingLevel(this, inS, current);
                    }
                    case 2:
                    {
                        return iceD_getProductsIn(this, inS, current);
                    }
                    case 3:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 4:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 5:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 6:
                    {
                        return global::Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                    case 7:
                    {
                        return iceD_numberOfProductsIn(this, inS, current);
                    }
                    case 8:
                    {
                        return iceD_setFreezingLevel(this, inS, current);
                    }
                    case 9:
                    {
                        return iceD_takeProductOutByName(this, inS, current);
                    }
                }

                global::System.Diagnostics.Debug.Assert(false);
                throw new global::Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }
    }
}
