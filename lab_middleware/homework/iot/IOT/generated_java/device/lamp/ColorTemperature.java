//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.7
//
// <auto-generated>
//
// Generated from file `lamp.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package device.lamp;

public enum ColorTemperature implements java.io.Serializable
{
    WARM(1000),
    NORMAL(5500),
    COOL(10000);

    public int value()
    {
        return _value;
    }

    public static ColorTemperature valueOf(int v)
    {
        switch(v)
        {
        case 1000:
            return WARM;
        case 5500:
            return NORMAL;
        case 10000:
            return COOL;
        }
        return null;
    }

    private ColorTemperature(int v)
    {
        _value = v;
    }

    public void ice_write(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeEnum(_value, 10000);
    }

    public static void ice_write(com.zeroc.Ice.OutputStream ostr, ColorTemperature v)
    {
        if(v == null)
        {
            ostr.writeEnum(device.lamp.ColorTemperature.WARM.value(), 10000);
        }
        else
        {
            ostr.writeEnum(v.value(), 10000);
        }
    }

    public static ColorTemperature ice_read(com.zeroc.Ice.InputStream istr)
    {
        int v = istr.readEnum(10000);
        return validate(v);
    }

    public static void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<ColorTemperature> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    public static void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, ColorTemperature v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.Size))
        {
            ice_write(ostr, v);
        }
    }

    public static java.util.Optional<ColorTemperature> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.Size))
        {
            return java.util.Optional.of(ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static ColorTemperature validate(int v)
    {
        final ColorTemperature e = valueOf(v);
        if(e == null)
        {
            throw new com.zeroc.Ice.MarshalException("enumerator value " + v + " is out of range");
        }
        return e;
    }

    private final int _value;
}
