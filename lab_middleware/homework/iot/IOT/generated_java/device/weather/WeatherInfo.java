//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.7
//
// <auto-generated>
//
// Generated from file `weatherStation.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package device.weather;

public class WeatherInfo implements java.lang.Cloneable,
                                    java.io.Serializable
{
    public double temperature;

    public double humidity;

    public double pressure;

    public WeatherInfo()
    {
    }

    public WeatherInfo(double temperature, double humidity, double pressure)
    {
        this.temperature = temperature;
        this.humidity = humidity;
        this.pressure = pressure;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        WeatherInfo r = null;
        if(rhs instanceof WeatherInfo)
        {
            r = (WeatherInfo)rhs;
        }

        if(r != null)
        {
            if(this.temperature != r.temperature)
            {
                return false;
            }
            if(this.humidity != r.humidity)
            {
                return false;
            }
            if(this.pressure != r.pressure)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::device::weather::WeatherInfo");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, temperature);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, humidity);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, pressure);
        return h_;
    }

    public WeatherInfo clone()
    {
        WeatherInfo c = null;
        try
        {
            c = (WeatherInfo)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeDouble(this.temperature);
        ostr.writeDouble(this.humidity);
        ostr.writeDouble(this.pressure);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.temperature = istr.readDouble();
        this.humidity = istr.readDouble();
        this.pressure = istr.readDouble();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, WeatherInfo v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public WeatherInfo ice_read(com.zeroc.Ice.InputStream istr)
    {
        WeatherInfo v = new WeatherInfo();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<WeatherInfo> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, WeatherInfo v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.VSize))
        {
            ostr.writeSize(24);
            ice_write(ostr, v);
        }
    }

    static public java.util.Optional<WeatherInfo> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.VSize))
        {
            istr.skipSize();
            return java.util.Optional.of(WeatherInfo.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final WeatherInfo _nullMarshalValue = new WeatherInfo();

    /** @hidden */
    public static final long serialVersionUID = -8864601348247267478L;
}
