/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.agh.reactive;
import akka.Done;
import akka.NotUsed;
import akka.actor.typed.ActorSystem;
import akka.actor.typed.javadsl.Behaviors;
import akka.stream.*;
import akka.stream.javadsl.*;
import edu.agh.reactive.hello.HelloActor;
import edu.agh.reactive.math.MathActor;


import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletionStage;

public class App {
    public static void main(String[] args) throws InterruptedException {
        //////////////////////////////////////////
        //TASK 0 - hello
        // create actor system

        final ActorSystem<String> helloSystem =
                        ActorSystem.create(HelloActor.create(), "helloActor");
        // send messages
        helloSystem.tell("hello world");


        //////////////////////////////////////////
        //TASK 1 - math operations
//        final ActorSystem<MathActor.MathCommand> mathContext =
//                ActorSystem.create(MathActor.create(), "actorMath");
//        System.out.println("math main: actor system ready");

        // send messages
//        mathContext.tell(new MathActor.MathCommandAdd(5, 3));
//        mathContext.tell(new MathActor.MathCommandMultiply(5, 3, null));
//        mathContext.tell(new MathActor.MathCommandMultiply(5, 2, null));
//        mathContext.tell(new MathActor.MathCommandDivide(15, 3, null));
//        mathContext.tell(new MathActor.MathCommandDivide(15, 5, null));
//
//        mathContext.tell(new MathActor.MathCommandDivide(15, 0, null));
//        Thread.sleep(2000);
//
//        System.out.println("Math main: sending second package of messages");
//        mathContext.tell(new MathActor.MathCommandMultiply(5, 3, null));
//        mathContext.tell(new MathActor.MathCommandMultiply(5, 2, null));
//        mathContext.tell(new MathActor.MathCommandDivide(15, 3, null));
//        mathContext.tell(new MathActor.MathCommandDivide(15, 5, null));
//        System.out.println("Math main: messages send");



        /// TASK 2 - Reactive Streams in Akka Streams
        final ActorSystem streamSystem = ActorSystem.create(Behaviors.empty(), "streams");
        final Materializer materializer = Materializer.createMaterializer(streamSystem);
        // example how to create simple Akka Streams
//        final Source<Integer, NotUsed> source = Source.range(1, 100);
//        final Flow<Integer, String, NotUsed> flow = Flow.fromFunction((Integer n) -> n.toString());
//        final Sink<String, CompletionStage<Done>> sink = Sink.foreach(str->System.out.println(str));
//        final RunnableGraph<NotUsed> runnableGraph = source.via(flow).to(sink);
//        runnableGraph.run(materializer);
        // create debugFlow and add slowSink components
//        final Source<Integer, NotUsed> source = Source.range(1, 100);
//        final Flow<Integer, String, NotUsed> debugFlow = Flow.fromFunction((Integer n) -> ("Value in processing: " + n.toString()));
//        final Sink<String, CompletionStage<Done>> slowSink = Sink.foreach(str -> {
//            Thread.sleep(1000);
//            System.out.println(str);
//        });
//        final RunnableGraph<NotUsed> runnableGraph = source
////                .buffer(16, OverflowStrategy.backpressure())
////                .buffer(7, OverflowStrategy.dropTail())
//                .buffer(7, OverflowStrategy.dropHead())
////                .buffer(16, OverflowStrategy.fail())
//                .via(debugFlow.async())
//                .to(slowSink);
//        runnableGraph.run(materializer);

//         TASK 3 - graph dsl
//         how to create
//         step 1 - frame
//        final Graph<ClosedShape, CompletionStage<Done>> specialGraph = GraphDSL.create(sink , (builder, out)-> {
//            //step 2 - building blocks
//                builder.add(sink);
//            final Outlet<Integer> dslSource = builder.add(source).out();
//            // step 3 - glue components
//                builder.from(dslSource).via(builder.add(flow)).to(out);
//            // step 4 closing
//                return ClosedShape.getInstance();
//        });
//
//        RunnableGraph.fromGraph(specialGraph).run(materializer);

        // TASK 3 Sollution

        final Source<Integer, NotUsed> in = Source.from(List.of(1, 2, 3, 4, 5));
        final Sink<List<String>, CompletionStage<List<String>>> sink = Sink.head();
        final Flow<Integer, Integer, NotUsed> addOneFlow = Flow.of(Integer.class).map(value -> value + 1);
        final Flow<Integer, Integer, NotUsed> multiplyByTenFlow = Flow.of(Integer.class).map(value -> value * 10);
        final Flow<Integer, String, NotUsed> intToStringFlow = Flow.fromFunction(Object::toString);

        final RunnableGraph<CompletionStage<List<String>>> result = RunnableGraph.fromGraph(
                GraphDSL
                        .create(
                                sink,
                                (builder, out) -> {
                                    final UniformFanOutShape<Integer, Integer> broadcast = builder.add(Broadcast.create(2));
                                    final UniformFanInShape<Integer, Integer> zip = builder.add(Merge.create(2));

                                    final Outlet<Integer> source = builder.add(in).out();

                                    builder
                                            .from(source)
                                            .viaFanOut(broadcast)
                                            .via(builder.add(addOneFlow))
                                            .viaFanIn(zip)
                                            .via(builder.add(intToStringFlow.grouped(1000)))
                                            .to(out);
                                    builder.from(broadcast).via(builder.add(multiplyByTenFlow)).toFanIn(zip);
                                    return ClosedShape.getInstance();
                                }
                        )
        );

        RunnableGraph
                .fromGraph(result)
                .run(materializer)
                .thenAccept(list -> list.forEach(System.out::println));

        try {
            System.out.println(">>> Press ENTER to exit <<<");
            System.in.read();
        } catch (IOException ignored) {
        } finally {
//            greeterMain.terminate();
//            mathContext.terminate();
//            helloSystem.terminate();
//            streamSystem.terminate();
        }
    }
}
